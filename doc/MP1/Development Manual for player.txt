++++ Development Manual for player.c ++++

The player is based on the guide at http://dranger.com/ffmpeg/ whose
code is licensed under the Creative Commons Attribution-Share Alike 
2.5 License.

Media File Formats:
  This player has been tested and verified to be capable of playing videos 
  encoded as MPEG-4 video with an MP2 or MP3 audio stream. There is an 
  included sample.avi file which may be played to witness the implementation
  of playing synchronized audio and video streams.

Key Data Structures:
  VideoState: Contains audio/video buffers, audio/video packet queues, picture queue, 
              filename, quit flag, audio clock, and SDL lock and conditional variables.

  PacketQueue: Queue for audio and video packets. Contains an AVPacket pointer to 
              the first and last packet in the queue. The number of packets, nb_packets,
              is stored as well as pointers to the lock and condition variable used to
              ensure reliability of the list.

  VideoPicture: The video picture struct contains a pointer to the image for the picture,
                the picture dimensions, and an allocated flag which is set once the 
                picture has been converted to the proper pixel format.


Program Flow:
  The main loop first initializes some variables and libraries: ffmpeg capabilities,
  the SDL window which will contain the video, and some video state information. The 
  VideoState struct contains buffers for the audio samples and video frames and a queue
  for each stream. It also contains the codec for each stream and SDL information
  for the window.

  The main loop then launches the decode thread. The decode thread opens the file and 
  gets the codecs for the audio and video stream, initializes the queues, and creates 
  buffers for the decoder. The decode thread then enters a loop and starts reading frames 
  consecutively and decoding them. After decoding, the thread adjusts the presentation
  timestamp in order ensure that the audio and video are synchronized. The decoded audio 
  and video packets are added to their respective queues. These packet queues are 
  consumed by the video display loop on a FIFO basis.

  The main loop launches into its main event loop after launching the decode loop. The
  event loop waits for events. The main events it waits for are  FF_ALLOC_EVENT and 
  FF_REFRESH_EVENT. The FF_ALLOC_EVENT is sent whenever a decoded frame is finished. This
  is to allocate space for and create an SDL Overlay of the frame. When the SDL Overlay
  picture is made, it is added to the picture queue. This queue gets consumed by the 
  video refresh function called on the FF_REFRESH_EVENT event. The video display window
  is refreshed about every 50 ms. The actual refresh of any given frame can vary by a
  few ms because it may be adjusted in order to keep the audio and video in sync.

  The video stops playing when it reaches the end of a file. To close the window, press
  CTRL + C and the playback fps is printed into the terminal. The quit flag is set high
  and everything is closed.

